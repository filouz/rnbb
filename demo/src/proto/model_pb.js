// source: model.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.pb.Ack', null, global);
goog.exportSymbol('proto.pb.Demo2D6', null, global);
goog.exportSymbol('proto.pb.DemoFlip', null, global);
goog.exportSymbol('proto.pb.Packet', null, global);
goog.exportSymbol('proto.pb.Packet.RequestCase', null, global);
goog.exportSymbol('proto.pb.Packet.ResponseCase', null, global);
goog.exportSymbol('proto.pb.RequestCase', null, global);
goog.exportSymbol('proto.pb.RequestType', null, global);
goog.exportSymbol('proto.pb.RnDetails', null, global);
goog.exportSymbol('proto.pb.RnRequest', null, global);
goog.exportSymbol('proto.pb.Transaction', null, global);
goog.exportSymbol('proto.pb.TxSize', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.RnRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.RnRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.RnRequest.displayName = 'proto.pb.RnRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.Transaction = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.Transaction, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.Transaction.displayName = 'proto.pb.Transaction';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.Demo2D6 = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.Demo2D6, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.Demo2D6.displayName = 'proto.pb.Demo2D6';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.DemoFlip = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.DemoFlip, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.DemoFlip.displayName = 'proto.pb.DemoFlip';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.RnDetails = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.pb.RnDetails.repeatedFields_, null);
};
goog.inherits(proto.pb.RnDetails, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.RnDetails.displayName = 'proto.pb.RnDetails';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.TxSize = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.TxSize, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.TxSize.displayName = 'proto.pb.TxSize';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.Ack = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.Ack, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.Ack.displayName = 'proto.pb.Ack';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.Packet = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.pb.Packet.oneofGroups_);
};
goog.inherits(proto.pb.Packet, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.Packet.displayName = 'proto.pb.Packet';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.RnRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.RnRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.RnRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.RnRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    pb_case: jspb.Message.getFieldWithDefault(msg, 2, 0),
    stoplimit: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.RnRequest}
 */
proto.pb.RnRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.RnRequest;
  return proto.pb.RnRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.RnRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.RnRequest}
 */
proto.pb.RnRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.pb.RequestType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {!proto.pb.RequestCase} */ (reader.readEnum());
      msg.setCase(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setStoplimit(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.RnRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.RnRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.RnRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.RnRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getCase();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getStoplimit();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
};


/**
 * optional RequestType type = 1;
 * @return {!proto.pb.RequestType}
 */
proto.pb.RnRequest.prototype.getType = function() {
  return /** @type {!proto.pb.RequestType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.pb.RequestType} value
 * @return {!proto.pb.RnRequest} returns this
 */
proto.pb.RnRequest.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional RequestCase case = 2;
 * @return {!proto.pb.RequestCase}
 */
proto.pb.RnRequest.prototype.getCase = function() {
  return /** @type {!proto.pb.RequestCase} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.pb.RequestCase} value
 * @return {!proto.pb.RnRequest} returns this
 */
proto.pb.RnRequest.prototype.setCase = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional int64 stopLimit = 3;
 * @return {number}
 */
proto.pb.RnRequest.prototype.getStoplimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.pb.RnRequest} returns this
 */
proto.pb.RnRequest.prototype.setStoplimit = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.Transaction.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.Transaction.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.Transaction} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.Transaction.toObject = function(includeInstance, msg) {
  var f, obj = {
    hash: jspb.Message.getFieldWithDefault(msg, 1, ""),
    timestamp: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.Transaction}
 */
proto.pb.Transaction.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.Transaction;
  return proto.pb.Transaction.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.Transaction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.Transaction}
 */
proto.pb.Transaction.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setHash(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTimestamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.Transaction.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.Transaction.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.Transaction} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.Transaction.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHash();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
};


/**
 * optional string hash = 1;
 * @return {string}
 */
proto.pb.Transaction.prototype.getHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.pb.Transaction} returns this
 */
proto.pb.Transaction.prototype.setHash = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int64 timestamp = 2;
 * @return {number}
 */
proto.pb.Transaction.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.pb.Transaction} returns this
 */
proto.pb.Transaction.prototype.setTimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.Demo2D6.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.Demo2D6.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.Demo2D6} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.Demo2D6.toObject = function(includeInstance, msg) {
  var f, obj = {
    number1: jspb.Message.getFieldWithDefault(msg, 1, 0),
    number2: jspb.Message.getFieldWithDefault(msg, 2, 0),
    details: (f = msg.getDetails()) && proto.pb.RnDetails.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.Demo2D6}
 */
proto.pb.Demo2D6.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.Demo2D6;
  return proto.pb.Demo2D6.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.Demo2D6} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.Demo2D6}
 */
proto.pb.Demo2D6.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setNumber1(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setNumber2(value);
      break;
    case 3:
      var value = new proto.pb.RnDetails;
      reader.readMessage(value,proto.pb.RnDetails.deserializeBinaryFromReader);
      msg.setDetails(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.Demo2D6.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.Demo2D6.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.Demo2D6} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.Demo2D6.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNumber1();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getNumber2();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getDetails();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.pb.RnDetails.serializeBinaryToWriter
    );
  }
};


/**
 * optional int64 number1 = 1;
 * @return {number}
 */
proto.pb.Demo2D6.prototype.getNumber1 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.pb.Demo2D6} returns this
 */
proto.pb.Demo2D6.prototype.setNumber1 = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 number2 = 2;
 * @return {number}
 */
proto.pb.Demo2D6.prototype.getNumber2 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.pb.Demo2D6} returns this
 */
proto.pb.Demo2D6.prototype.setNumber2 = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional RnDetails details = 3;
 * @return {?proto.pb.RnDetails}
 */
proto.pb.Demo2D6.prototype.getDetails = function() {
  return /** @type{?proto.pb.RnDetails} */ (
    jspb.Message.getWrapperField(this, proto.pb.RnDetails, 3));
};


/**
 * @param {?proto.pb.RnDetails|undefined} value
 * @return {!proto.pb.Demo2D6} returns this
*/
proto.pb.Demo2D6.prototype.setDetails = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pb.Demo2D6} returns this
 */
proto.pb.Demo2D6.prototype.clearDetails = function() {
  return this.setDetails(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pb.Demo2D6.prototype.hasDetails = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.DemoFlip.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.DemoFlip.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.DemoFlip} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.DemoFlip.toObject = function(includeInstance, msg) {
  var f, obj = {
    head: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    details: (f = msg.getDetails()) && proto.pb.RnDetails.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.DemoFlip}
 */
proto.pb.DemoFlip.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.DemoFlip;
  return proto.pb.DemoFlip.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.DemoFlip} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.DemoFlip}
 */
proto.pb.DemoFlip.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setHead(value);
      break;
    case 3:
      var value = new proto.pb.RnDetails;
      reader.readMessage(value,proto.pb.RnDetails.deserializeBinaryFromReader);
      msg.setDetails(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.DemoFlip.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.DemoFlip.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.DemoFlip} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.DemoFlip.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHead();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getDetails();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.pb.RnDetails.serializeBinaryToWriter
    );
  }
};


/**
 * optional bool head = 1;
 * @return {boolean}
 */
proto.pb.DemoFlip.prototype.getHead = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.pb.DemoFlip} returns this
 */
proto.pb.DemoFlip.prototype.setHead = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional RnDetails details = 3;
 * @return {?proto.pb.RnDetails}
 */
proto.pb.DemoFlip.prototype.getDetails = function() {
  return /** @type{?proto.pb.RnDetails} */ (
    jspb.Message.getWrapperField(this, proto.pb.RnDetails, 3));
};


/**
 * @param {?proto.pb.RnDetails|undefined} value
 * @return {!proto.pb.DemoFlip} returns this
*/
proto.pb.DemoFlip.prototype.setDetails = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pb.DemoFlip} returns this
 */
proto.pb.DemoFlip.prototype.clearDetails = function() {
  return this.setDetails(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pb.DemoFlip.prototype.hasDetails = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.pb.RnDetails.repeatedFields_ = [9];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.RnDetails.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.RnDetails.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.RnDetails} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.RnDetails.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 2, 0),
    starttimestamp: jspb.Message.getFieldWithDefault(msg, 5, 0),
    stoptimestamp: jspb.Message.getFieldWithDefault(msg, 6, 0),
    elapsedtime: jspb.Message.getFieldWithDefault(msg, 7, 0),
    txsize: jspb.Message.getFieldWithDefault(msg, 8, 0),
    txsList: jspb.Message.toObjectList(msg.getTxsList(),
    proto.pb.Transaction.toObject, includeInstance),
    txshash: jspb.Message.getFieldWithDefault(msg, 10, ""),
    seed: jspb.Message.getFieldWithDefault(msg, 11, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.RnDetails}
 */
proto.pb.RnDetails.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.RnDetails;
  return proto.pb.RnDetails.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.RnDetails} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.RnDetails}
 */
proto.pb.RnDetails.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = /** @type {!proto.pb.RequestCase} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setStarttimestamp(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setStoptimestamp(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setElapsedtime(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTxsize(value);
      break;
    case 9:
      var value = new proto.pb.Transaction;
      reader.readMessage(value,proto.pb.Transaction.deserializeBinaryFromReader);
      msg.addTxs(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setTxshash(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setSeed(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.RnDetails.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.RnDetails.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.RnDetails} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.RnDetails.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getStarttimestamp();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = message.getStoptimestamp();
  if (f !== 0) {
    writer.writeInt64(
      6,
      f
    );
  }
  f = message.getElapsedtime();
  if (f !== 0) {
    writer.writeInt64(
      7,
      f
    );
  }
  f = message.getTxsize();
  if (f !== 0) {
    writer.writeInt64(
      8,
      f
    );
  }
  f = message.getTxsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      9,
      f,
      proto.pb.Transaction.serializeBinaryToWriter
    );
  }
  f = message.getTxshash();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getSeed();
  if (f !== 0) {
    writer.writeInt64(
      11,
      f
    );
  }
};


/**
 * optional RequestCase type = 2;
 * @return {!proto.pb.RequestCase}
 */
proto.pb.RnDetails.prototype.getType = function() {
  return /** @type {!proto.pb.RequestCase} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.pb.RequestCase} value
 * @return {!proto.pb.RnDetails} returns this
 */
proto.pb.RnDetails.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional int64 startTimestamp = 5;
 * @return {number}
 */
proto.pb.RnDetails.prototype.getStarttimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.pb.RnDetails} returns this
 */
proto.pb.RnDetails.prototype.setStarttimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int64 stopTimestamp = 6;
 * @return {number}
 */
proto.pb.RnDetails.prototype.getStoptimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.pb.RnDetails} returns this
 */
proto.pb.RnDetails.prototype.setStoptimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional int64 elapsedTime = 7;
 * @return {number}
 */
proto.pb.RnDetails.prototype.getElapsedtime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.pb.RnDetails} returns this
 */
proto.pb.RnDetails.prototype.setElapsedtime = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional int64 txSize = 8;
 * @return {number}
 */
proto.pb.RnDetails.prototype.getTxsize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.pb.RnDetails} returns this
 */
proto.pb.RnDetails.prototype.setTxsize = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * repeated Transaction txs = 9;
 * @return {!Array<!proto.pb.Transaction>}
 */
proto.pb.RnDetails.prototype.getTxsList = function() {
  return /** @type{!Array<!proto.pb.Transaction>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.pb.Transaction, 9));
};


/**
 * @param {!Array<!proto.pb.Transaction>} value
 * @return {!proto.pb.RnDetails} returns this
*/
proto.pb.RnDetails.prototype.setTxsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 9, value);
};


/**
 * @param {!proto.pb.Transaction=} opt_value
 * @param {number=} opt_index
 * @return {!proto.pb.Transaction}
 */
proto.pb.RnDetails.prototype.addTxs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 9, opt_value, proto.pb.Transaction, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.pb.RnDetails} returns this
 */
proto.pb.RnDetails.prototype.clearTxsList = function() {
  return this.setTxsList([]);
};


/**
 * optional string txsHash = 10;
 * @return {string}
 */
proto.pb.RnDetails.prototype.getTxshash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.pb.RnDetails} returns this
 */
proto.pb.RnDetails.prototype.setTxshash = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional int64 seed = 11;
 * @return {number}
 */
proto.pb.RnDetails.prototype.getSeed = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {number} value
 * @return {!proto.pb.RnDetails} returns this
 */
proto.pb.RnDetails.prototype.setSeed = function(value) {
  return jspb.Message.setProto3IntField(this, 11, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.TxSize.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.TxSize.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.TxSize} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.TxSize.toObject = function(includeInstance, msg) {
  var f, obj = {
    length: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.TxSize}
 */
proto.pb.TxSize.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.TxSize;
  return proto.pb.TxSize.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.TxSize} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.TxSize}
 */
proto.pb.TxSize.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setLength(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.TxSize.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.TxSize.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.TxSize} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.TxSize.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLength();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
};


/**
 * optional int64 length = 1;
 * @return {number}
 */
proto.pb.TxSize.prototype.getLength = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.pb.TxSize} returns this
 */
proto.pb.TxSize.prototype.setLength = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.Ack.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.Ack.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.Ack} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.Ack.toObject = function(includeInstance, msg) {
  var f, obj = {
    reqack: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.Ack}
 */
proto.pb.Ack.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.Ack;
  return proto.pb.Ack.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.Ack} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.Ack}
 */
proto.pb.Ack.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.pb.RequestType} */ (reader.readEnum());
      msg.setReqack(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.Ack.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.Ack.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.Ack} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.Ack.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getReqack();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * optional RequestType reqAck = 1;
 * @return {!proto.pb.RequestType}
 */
proto.pb.Ack.prototype.getReqack = function() {
  return /** @type {!proto.pb.RequestType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.pb.RequestType} value
 * @return {!proto.pb.Ack} returns this
 */
proto.pb.Ack.prototype.setReqack = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.pb.Packet.oneofGroups_ = [[1,2,6,3,5],[4]];

/**
 * @enum {number}
 */
proto.pb.Packet.ResponseCase = {
  RESPONSE_NOT_SET: 0,
  RNDETAILS: 1,
  DEMO2D6: 2,
  DEMOFLIP: 6,
  ACK: 3,
  SIZE: 5
};

/**
 * @return {proto.pb.Packet.ResponseCase}
 */
proto.pb.Packet.prototype.getResponseCase = function() {
  return /** @type {proto.pb.Packet.ResponseCase} */(jspb.Message.computeOneofCase(this, proto.pb.Packet.oneofGroups_[0]));
};

/**
 * @enum {number}
 */
proto.pb.Packet.RequestCase = {
  REQUEST_NOT_SET: 0,
  STARTNSTOP: 4
};

/**
 * @return {proto.pb.Packet.RequestCase}
 */
proto.pb.Packet.prototype.getRequestCase = function() {
  return /** @type {proto.pb.Packet.RequestCase} */(jspb.Message.computeOneofCase(this, proto.pb.Packet.oneofGroups_[1]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.Packet.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.Packet.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.Packet} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.Packet.toObject = function(includeInstance, msg) {
  var f, obj = {
    rndetails: (f = msg.getRndetails()) && proto.pb.RnDetails.toObject(includeInstance, f),
    demo2d6: (f = msg.getDemo2d6()) && proto.pb.Demo2D6.toObject(includeInstance, f),
    demoflip: (f = msg.getDemoflip()) && proto.pb.DemoFlip.toObject(includeInstance, f),
    ack: (f = msg.getAck()) && proto.pb.Ack.toObject(includeInstance, f),
    size: (f = msg.getSize()) && proto.pb.TxSize.toObject(includeInstance, f),
    startnstop: (f = msg.getStartnstop()) && proto.pb.RnRequest.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.Packet}
 */
proto.pb.Packet.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.Packet;
  return proto.pb.Packet.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.Packet} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.Packet}
 */
proto.pb.Packet.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.pb.RnDetails;
      reader.readMessage(value,proto.pb.RnDetails.deserializeBinaryFromReader);
      msg.setRndetails(value);
      break;
    case 2:
      var value = new proto.pb.Demo2D6;
      reader.readMessage(value,proto.pb.Demo2D6.deserializeBinaryFromReader);
      msg.setDemo2d6(value);
      break;
    case 6:
      var value = new proto.pb.DemoFlip;
      reader.readMessage(value,proto.pb.DemoFlip.deserializeBinaryFromReader);
      msg.setDemoflip(value);
      break;
    case 3:
      var value = new proto.pb.Ack;
      reader.readMessage(value,proto.pb.Ack.deserializeBinaryFromReader);
      msg.setAck(value);
      break;
    case 5:
      var value = new proto.pb.TxSize;
      reader.readMessage(value,proto.pb.TxSize.deserializeBinaryFromReader);
      msg.setSize(value);
      break;
    case 4:
      var value = new proto.pb.RnRequest;
      reader.readMessage(value,proto.pb.RnRequest.deserializeBinaryFromReader);
      msg.setStartnstop(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.Packet.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.Packet.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.Packet} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.Packet.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRndetails();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.pb.RnDetails.serializeBinaryToWriter
    );
  }
  f = message.getDemo2d6();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.pb.Demo2D6.serializeBinaryToWriter
    );
  }
  f = message.getDemoflip();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.pb.DemoFlip.serializeBinaryToWriter
    );
  }
  f = message.getAck();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.pb.Ack.serializeBinaryToWriter
    );
  }
  f = message.getSize();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.pb.TxSize.serializeBinaryToWriter
    );
  }
  f = message.getStartnstop();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.pb.RnRequest.serializeBinaryToWriter
    );
  }
};


/**
 * optional RnDetails rnDetails = 1;
 * @return {?proto.pb.RnDetails}
 */
proto.pb.Packet.prototype.getRndetails = function() {
  return /** @type{?proto.pb.RnDetails} */ (
    jspb.Message.getWrapperField(this, proto.pb.RnDetails, 1));
};


/**
 * @param {?proto.pb.RnDetails|undefined} value
 * @return {!proto.pb.Packet} returns this
*/
proto.pb.Packet.prototype.setRndetails = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.pb.Packet.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pb.Packet} returns this
 */
proto.pb.Packet.prototype.clearRndetails = function() {
  return this.setRndetails(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pb.Packet.prototype.hasRndetails = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Demo2D6 demo2d6 = 2;
 * @return {?proto.pb.Demo2D6}
 */
proto.pb.Packet.prototype.getDemo2d6 = function() {
  return /** @type{?proto.pb.Demo2D6} */ (
    jspb.Message.getWrapperField(this, proto.pb.Demo2D6, 2));
};


/**
 * @param {?proto.pb.Demo2D6|undefined} value
 * @return {!proto.pb.Packet} returns this
*/
proto.pb.Packet.prototype.setDemo2d6 = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.pb.Packet.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pb.Packet} returns this
 */
proto.pb.Packet.prototype.clearDemo2d6 = function() {
  return this.setDemo2d6(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pb.Packet.prototype.hasDemo2d6 = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional DemoFlip demoFlip = 6;
 * @return {?proto.pb.DemoFlip}
 */
proto.pb.Packet.prototype.getDemoflip = function() {
  return /** @type{?proto.pb.DemoFlip} */ (
    jspb.Message.getWrapperField(this, proto.pb.DemoFlip, 6));
};


/**
 * @param {?proto.pb.DemoFlip|undefined} value
 * @return {!proto.pb.Packet} returns this
*/
proto.pb.Packet.prototype.setDemoflip = function(value) {
  return jspb.Message.setOneofWrapperField(this, 6, proto.pb.Packet.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pb.Packet} returns this
 */
proto.pb.Packet.prototype.clearDemoflip = function() {
  return this.setDemoflip(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pb.Packet.prototype.hasDemoflip = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional Ack ack = 3;
 * @return {?proto.pb.Ack}
 */
proto.pb.Packet.prototype.getAck = function() {
  return /** @type{?proto.pb.Ack} */ (
    jspb.Message.getWrapperField(this, proto.pb.Ack, 3));
};


/**
 * @param {?proto.pb.Ack|undefined} value
 * @return {!proto.pb.Packet} returns this
*/
proto.pb.Packet.prototype.setAck = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.pb.Packet.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pb.Packet} returns this
 */
proto.pb.Packet.prototype.clearAck = function() {
  return this.setAck(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pb.Packet.prototype.hasAck = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional TxSize size = 5;
 * @return {?proto.pb.TxSize}
 */
proto.pb.Packet.prototype.getSize = function() {
  return /** @type{?proto.pb.TxSize} */ (
    jspb.Message.getWrapperField(this, proto.pb.TxSize, 5));
};


/**
 * @param {?proto.pb.TxSize|undefined} value
 * @return {!proto.pb.Packet} returns this
*/
proto.pb.Packet.prototype.setSize = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.pb.Packet.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pb.Packet} returns this
 */
proto.pb.Packet.prototype.clearSize = function() {
  return this.setSize(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pb.Packet.prototype.hasSize = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional RnRequest startNstop = 4;
 * @return {?proto.pb.RnRequest}
 */
proto.pb.Packet.prototype.getStartnstop = function() {
  return /** @type{?proto.pb.RnRequest} */ (
    jspb.Message.getWrapperField(this, proto.pb.RnRequest, 4));
};


/**
 * @param {?proto.pb.RnRequest|undefined} value
 * @return {!proto.pb.Packet} returns this
*/
proto.pb.Packet.prototype.setStartnstop = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.pb.Packet.oneofGroups_[1], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pb.Packet} returns this
 */
proto.pb.Packet.prototype.clearStartnstop = function() {
  return this.setStartnstop(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pb.Packet.prototype.hasStartnstop = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * @enum {number}
 */
proto.pb.RequestType = {
  START: 0,
  STOP: 1,
  CANCEL: 2
};

/**
 * @enum {number}
 */
proto.pb.RequestCase = {
  D2D6: 0,
  FLIP: 1,
  MINT: 2
};

goog.object.extend(exports, proto.pb);
